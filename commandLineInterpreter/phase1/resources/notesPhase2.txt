*COPY is the Label of the program
*The only restriction is that there must be at least one space or tab separating each field present. 
	*The only exception is if indexing is requested -- don't put a space between the comma and the X.
		*EX: """BUFFER,X"""
*Order of Command in Assembly is (Label|Operation|Operand|Comments)
	{label} operation {operand{,X}} {comment}
		-items in curly braces are optional
-----
*Ignore anything above START or END
*the system is not case sensitive
*Illegal Label (IF)
	-larger than 6 alphanumeric chars
	-starts with a digit
*blank lines are ignored
*a period in column 1 indicates the entire line is a comment
*a label must begin in column 1 (assuming columns are 1 based)
*dont keep reading section if there is nothing else to read in
*finding another END Directive (impossible because you would stop after the first one)
*Duplicate Labels
	-Assumption: no scoping rules [I.O.W. any label can only appear once]
*Illegal Operation
	*cannot be found in the op table
*Too many symbols in source program (500 symbols max)
*comments go in intermediate file with alot of white space
*LOCCTR (aka location counter) is in hex
	*as each statement is examined its length is added to LOCCTR (for SIC just 3 bytes, for SIX/XE it depends)
*save #{OPERAND} as starting address
	*initialize LOCCTR to starting address
*finding another START Directive
*the BYTE directive may take two types of operands
	*regular string (c'...')
		*max length is 30 characters
	*hex string (x'...')
		*max length of hex string is 16 bytes (32 hex digits)
			*the number of hex digits must be even
*Missing or Illegal operand on data storage directive
*Missing or Illegal operand on START directive
*Missing or Illegal operand on END directive (dont need to check if symbol is defined)
*Illegal Operand
	*operand not in form (operand) or (operand,x)
	*operand not a
		*a symbol that is used as a label in the source program
		*a hex address
			* if it begins with 'A' through 'F' we must have a leading '0' (to distinguish from a label)
*Program Too Long (larger than 32,768 bytes of memory or 7FFFh) [bigger than 32K]
*Instruction operands must be of the form operand or operand,X , where operand is either a symbol that is used as a label in the source program, or an actual hexadecimal address. Hexadecimal addresses that would begin with 'A' through 'F', must have a leading '0' to distinguish them from labels.

----------DONE IN PASS 1----------

LABEL SPECIFIC-----
-Illegal format in label field
-Duplicate label definition
-Too many symbols in source program

OPERATION SPECIFIC-----
-Missing operation code
-Unrecognized operation code (I assume as in not a directive and not a mnemonic)
-Illegal format in operation field (I assume as in not a directive and not a mnemonic)

DIRECTIVE SPECIFIC-----
---START
-Missing or misplaced START statement
-Duplicate or misplaced START statement
-Illegal operand in START statement
-Missing or misplaced operand in START statement
---BYTE
-Missing or misplaced operand in BYTE statement
-Illegal operand in BYTE statement 
-Odd length hex string in BYTE statement
---WORD
-Missing or misplaced operand in WORD statement
-Illegal operand in WORD statement
---RESB
-Missing or misplaced operand in RESB statement
-Illegal operand in RESB statement
---RESW
-Missing or misplaced operand in RESW statement
-Illegal operand in RESW statement
---END
-Missing or misplaced operand in END statement
-Illegal operand in END statement

OTHER-----
-Program too long (32767)

//----------------------------------------------------------------------------------------------------

/*
NOTES on SIC Machine Architecture (NOT SIC/XE)

Memory
	memory - 8 bytes
	word - 3 bytes
	size 2^15 = 32,768 bytes of memory AT MOST
	address: byte or lowest numbered byte in a word... TODO... this means...?

Data Format
	integer: words 2's comp
	character: byte, ASCII rep

Regs
	A - 0 - Accumulator
	X - 1 - Index Reg
	L - 2 - Linkage Reg
	PC - 8 - Program Counter
	SW - 9 Status word

Instruct Format (a word)
	opcode - 8 bits
	index bit - 1 bit
	address - 15 bits

Addressing Mode
	Direct: index bit = 0, TA = address
	Indexed: index bit = 1, TA = address + (X)

25 Instructions

Input and Output happens to/from rightmost byte of reg A --- 1 byte at a time --- each device is assigned an 8 bit code

Some Directive aka psuedo-ops
START
END
BYTE
WORD
RESB
RESW

OTHER NOTES FROM WIKI
stores most memory addresses hexadecimal integer format... TODO... this means???
stores all data in binary, and uses the two's complement to represent negative values at the machine level
Memory storage in SIC consists of 8-bit bytes, and all memory addresses in SIC are byte addresses. 
Any three consecutive bytes form a 24-bit 'word' value, addressed by the location of the lowest numbered byte in the word value. 
Numeric values are stored as word values, and 
character values use the 8-bit ASCII system
*/